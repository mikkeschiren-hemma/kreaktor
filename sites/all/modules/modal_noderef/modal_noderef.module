<?php
// $Id: modal_noderef.module,v 1.1.2.4 2010/12/09 16:03:36 mbutcher Exp $

/**
 * The main file for modal_noderef.
 * @file
 */
define('MODAL_NODEREFS_ON', 'modal_noderefs_on_');

/**
 * Implementation of hook_help().
 */
function modal_noderef_help($path, $args) {
  if ($path == 'admin/help#modal_noderef') {
    return t('Add a modal popup to node references so that one can create a new node from within another node edit page.');
  }
}

/**
 * Implements hook_form_alter().
 *
 * This does two things:
 * - If the item is a node editor opened inside of a modal, it adds modal processing.
 * - If the item is a node editor with nodereferences, it adds modal links to the appropriate noderefs.
 */
function modal_noderef_form_alter(&$form, $form_state, $form_id) {
  
  
  // Catch only cases where we are on a node editor.
  if (!empty($form['type']['#value']) && $form['type']['#value'] . '_node_form' == $form_id) {
    
    // Handle the case where we are on an editor inside of a modal.
    $in_modal = automodal_request_is_child();
    if ($in_modal) {
      $form['#submit'][] = '_modal_noderef_modal_submit';
    }
    else {
      _modal_noderef_add_link($form, $form['type']['#value']);
    }
  }
}

/**
 * Implements hook_nodeapi().
 */
function modal_noderef_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    // When a node is inserted or updated and the current window is a modal,
    // we need to add the close action to close the modal. This does mean that
    // you can't do modal editors launched from inside of other modal editors
    // (i.e. layered modals).
    case 'insert':
    case 'update':
      if(automodal_request_is_child()) {
        $node_name = sprintf('%s [nid:%d]', $node->title, $node->nid);
        drupal_set_message('Saving ' . $node_name);
        modalframe_close_dialog(array(
          'message' => $node_name,
        ));
        drupal_add_js(drupal_get_path('module', 'modal_noderef') . '/modal_noderef.js');
      }
      break;
  }
}

/**
 * Add modal link.
 *
 * Helper function to add a modal link to all necessary nodereference fields.
 *
 * @param &$form
 *  The form or form segment. (This function is recursive)
 * @param $node_type
 *  The content type for the node that this form is creating.
 */
function _modal_noderef_add_link(&$form, $node_type) {
  drupal_add_js(drupal_get_path('module', 'modal_noderef') . '/modal_noderef.js');
  
  $all_node_types = node_get_types();
  foreach ($form as $k => $item) {
    if (is_array($item)) {
      // Recurse into fieldsets.
      if (isset($item['#type']) && $item['#type'] == 'fieldset') {
        _modal_noderef_add_link($form[$k], $node_type);
      }
      // Check to see if this is a nodereference with an add link.
      elseif (ModalNodeRefs::withRefs()->has($k)) {
        $content_fields = content_fields($item['#field_name'], $node_type);
        $referenceable_types = $content_fields['referenceable_types'];
        
        $types = implode(', ', modal_noderef_field_links($referenceable_types, $all_node_types));
        
        $form[$k]['#suffix'] .= theme('modal_noderef_creation_link', t('Open a modal window and create a new item in place.'), t('Create a new ') . $types);
      }
    }
  }
}

/**
 * Given a list of allowed fields and a list of node types, create a list of links to create new items.
 *
 * @param $fields
 *  An array of fields, as generated by {@link content_fields()}.
 * @param $node_types
 *  An array of all node types, as returned by {@link node_get_types()}.
 * @return
 *  An indexed array of links.
 */
function modal_noderef_field_links($fields, $node_types) {
  $links = array();
  $options = array('attributes' => array('class' => 'edit-in-modal'));
  foreach ($fields as $name => $is_allowed) {
    $url_name = str_replace('_', '-', $name);
    $url = 'node/add/' . $url_name;
    drupal_alter('modal_noderef_field_links_url', $url);
    if (!empty($is_allowed)  && user_access('create ' . check_plain($node_types[$name]->type) . ' content')) {
      $links[] = l($node_types[$name]->name, $url, $options);
    }
  }
  return $links;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This just handles the editing fields for CCK Node References.
 * @see modal_noderef_nodereference_field_submit()
 */
function modal_noderef_form_content_field_edit_form_alter(&$form, $form_sate) {
  
  // Only latch onto nodereferences.
  if ($form['#field']['type'] != 'nodereference') {
    return;
  }
  $field_name = $form['#field']['field_name'];
  
  $form['field']['modal_noderef_link'] = array(
    '#weight' => 1,
    '#type' => 'checkbox',
    '#default_value' => ModalNodeRefs::withRefs()->has($field_name),
    '#title' => t('Show modal editor'),
    '#description' => t('Add a link to this nodereference field that allows users to create new nodes (in a modal) and then adds them as a nodereference.'),
  );
  $form['#submit'][] = 'modal_noderef_nodereference_field_submit';
  
}

/**
 * Additional submit handler for content_field_edit_form.
 *
 * @see modal_noderef_form_content_field_edit_form_alter()
 */
function modal_noderef_nodereference_field_submit($form, &$form_state) {
  
  $do_add = $form_state['values']['modal_noderef_link'];
  if ($do_add) {
    ModalNodeRefs::withRefs()->add($form['#field']['field_name'])->save();
  }
  else {
    ModalNodeRefs::withRefs()->remove($form['#field']['field_name'])->save();
  }
}

/**
 * Implements hook_theme().
 */
function modal_noderef_theme() {
  return array(
    'modal_noderef_creation_link' => array(
      'arguments' => array('text' => '', 'link' => ''),
    ),
  );
}

/**
 * Theme the node creation section.
 * @ingroup themes
 */
function theme_modal_noderef_creation_link($text, $link) {
  return '<div class="form-item modal-noderef-creation-link-wrapper"><div class="option modal-noderef-creation-link">' . $link . '</div><div class="description">' . $text . '</div></div>';
}

/**
 * Factory for ModalNodeRefsList.
 */
class ModalNodeRefs {
  static private $instance = NULL;
  static function withRefs() {
    if (!isset(self::$instance)) {
      self::$instance = new ModalNodeRefsList();
    }
    return self::$instance;
  }
}

/**
 * List of fields that have modal node reference settings.
 */
class ModalNodeRefsList {
  const FIELDS = 'modal_node_reference_fields';
  const SEP = ' ';
  protected $noderefs = NULL;
  
  public function __construct() {
    $fields = variable_get(self::FIELDS, '');
    $refs = explode(self::SEP, $fields);
    
    $this->noderefs = array_combine($refs, $refs);
  }
  
  public function has($field) {
    return isset($this->noderefs[$field]);
  }
  
  public function add($field) {
    $this->noderefs[$field] = $field;
    return $this;
  }
  
  public function remove($field) {
    unset($this->noderefs[$field]);
    return $this;
  }
  
  public function save() {
    $values = implode(self::SEP, $this->noderefs);
    variable_set(self::FIELDS, $values);
    return $this;
  }
}